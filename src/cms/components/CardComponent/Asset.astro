---
import { Image as AstroImage } from 'astro:assets';
import type {
CardFragment,
DisplaySettingsFragment,
} from '../../../../__generated/sdk';
import type { ContentPayload } from '../../../graphql/shared/ContentPayload';
import { getDictionaryFromDisplaySettings } from '../../../graphql/shared/displaySettingsHelpers';

export interface Props {
    data: CardFragment;
    displaySettings: DisplaySettingsFragment[];
    displayTemplateKey: string;
    contentPayload: ContentPayload;
    DisplayAs?: string;
    widthClass?: string;
    verticalAlignClass?: string;
    isFullSplit?: boolean;
}
const { data, displaySettings, displayTemplateKey, contentPayload, DisplayAs, widthClass, verticalAlignClass, isFullSplit } =
    Astro.props as Props;
const imageUrl = (data.Asset as any)?.item?.Url || data.Asset?.url?.default || null;

// Handle different display modes
const isHoverMode = DisplayAs === 'hover';

// Get image tint settings from display settings (only for hover mode)
const dictionary = getDictionaryFromDisplaySettings(displaySettings);
const imageTintLevel = dictionary['imageTintLevel'] || 'o_0'; // default no tint

// Build image tint overlay class using bg-neutral with opacity (only for hover mode)
let imageTintClass = '';
if (isHoverMode && imageTintLevel !== 'o_0') {
    const opacityMap: Record<string, string> = {
        'o_0': '/0',
        'o_10': '/10',
        'o_20': '/20',
        'o_30': '/30',
        'o_40': '/40',
        'o_50': '/50',
        'o_60': '/60',
        'o_70': '/70',
        'o_75': '/75',
        'o_80': '/80',
        'o_90': '/90',
        'o_100': '/100'
    };

    const opacityClass = opacityMap[imageTintLevel] || '/0';
    imageTintClass = `bg-neutral${opacityClass}`;
}


const containerClasses = isFullSplit 
    ? 'relative w-full md:w-1/2 min-h-[500px] overflow-hidden'
    : isHoverMode
    ? 'w-full h-full'
    : `relative mx-auto max-w-4xl ${widthClass || 'flex-1'} ${verticalAlignClass || 'self-center'}`;

const imageClasses = isFullSplit
    ? 'w-full min-h-[500px] object-cover'
    : isHoverMode
    ? 'w-full h-full object-cover block'
    : 'relative content-center rounded-xl object-cover';

const finalContainerClasses = [containerClasses];
---

<div class:list={finalContainerClasses}>
    {
        imageUrl && (
            <>
                <AstroImage
                    alt={data.Asset?.item?.AltText || data.Asset?.item?._metadata?.displayName || data.Heading || 'Card image'}
                    class={imageClasses}
                    inferSize
                    src={imageUrl}
                />
                {/* Image tint overlay (only for hover mode when tint is applied) */}
                {isHoverMode && imageTintClass && (
                    <div class={`absolute inset-0 ${imageTintClass} z-5`}></div>
                )}
            </>
        )
    }
</div>
