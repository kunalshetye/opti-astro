---
import type {
    CardFragment,
    DisplaySettingsFragment,
} from '../../../../__generated/sdk';

import type { ContentPayload } from '../../../graphql/shared/ContentPayload';
import { getDictionaryFromDisplaySettings } from '../../../graphql/shared/displaySettingsHelpers';
import { getCardStyles } from './CardStyling';
import Asset from './Asset.astro';
import Content from './Content.astro';
import Wrapper from './Wrapper.astro';
export interface Props {
    data: CardFragment;
    displaySettings: DisplaySettingsFragment[];
    displayTemplateKey: string;
    contentPayload: ContentPayload;
}
const { data, displaySettings, displayTemplateKey, contentPayload } =
    Astro.props as Props;

const dictionary = getDictionaryFromDisplaySettings(displaySettings);
const { backgroundColor } = dictionary;
const { DisplayAs } = data;
const { animationClasses } = getCardStyles(displaySettings);
---

{
    () => {
        switch (DisplayAs) {
            case 'textOnRight':
            case 'textBelowCard':
                return (
                    <Wrapper DisplayAs={DisplayAs} animationClasses={animationClasses}>
                        <Asset
                            data={data}
                            displaySettings={displaySettings}
                            displayTemplateKey={displayTemplateKey}
                            contentPayload={contentPayload}
                        />
                        <Content
                            data={data}
                            displaySettings={displaySettings}
                            displayTemplateKey={displayTemplateKey}
                            contentPayload={contentPayload}
                        />
                    </Wrapper>
                );
            case 'textOnLeft':
            case 'textAboveCard':
                return (
                    <Wrapper DisplayAs={DisplayAs} animationClasses={animationClasses}>
                        <Content
                            data={data}
                            displaySettings={displaySettings}
                            displayTemplateKey={displayTemplateKey}
                            contentPayload={contentPayload}
                        />
                        <Asset
                            data={data}
                            displaySettings={displaySettings}
                            displayTemplateKey={displayTemplateKey}
                            contentPayload={contentPayload}
                        />
                    </Wrapper>
                );
        }
    }
}
