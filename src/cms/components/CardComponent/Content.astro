---
import type {
    CardFragment,
    DisplaySettingsFragment,
} from '../../../../__generated/sdk';
import type { ContentPayload } from '../../../graphql/shared/ContentPayload';
import LinkButton from '../ButtonComponent/LinkButton.astro';
// import { getCardStyles } from './CardStyling';
import { getButtonStyles } from '../ButtonComponent/ButtonStyling';
import { getCardTextAlignmentStyle, getCardHeaderStyles } from './CardStyling';

export interface Props {
    data: CardFragment;
    displaySettings: DisplaySettingsFragment[];
    displayTemplateKey: string;
    contentPayload: ContentPayload;
    DisplayAs?: string;
    widthClass?: string;
    verticalAlignClass?: string;
}
const { data, displaySettings, DisplayAs, widthClass, verticalAlignClass } = Astro.props as Props;
const cardButtonStyles = getButtonStyles(displaySettings, false); // false: button type defined here
const cardTextAlignmentStyle = getCardTextAlignmentStyle(displaySettings);
const cardHeaderStyles = getCardHeaderStyles(displaySettings);

// Button type mapping for cleaner code
const buttonTypes = ['btn-primary', 'btn-secondary', 'btn-accent', 'btn-info', ''];
const getButtonType = (index: number) => buttonTypes[index] || 'btn-primary';

const cssClassesSection = {
    textOnRight: 'content-center',
    textOnLeft: 'content-center',
    textAboveCard: 'text-center',
    textBelowCard: 'text-center',
};
const cssTextClasses = {
    textOnRight: 'mt-0',
    textOnLeft: 'mt-0',
    textAboveCard: 'mt-2',
    textBelowCard: 'mt-2',
};
const cssClassesCallToAction = {
    textOnRight: 'z-20 mt-8 flex gap-2 flex-wrap',
    textOnLeft: 'z-20 mt-8 flex gap-2 flex-wrap',
    textAboveCard: 'z-20 mt-8 flex justify-center gap-2 flex-wrap',
    textBelowCard: 'z-20 mt-8 flex justify-center gap-2 flex-wrap',
};
type DisplayAsType =
    | 'textOnRight'
    | 'textOnLeft'
    | 'textAboveCard'
    | 'textBelowCard';
const displayAs: DisplayAsType =
    (DisplayAs as DisplayAsType) ?? (data?.DisplayAs as DisplayAsType) ?? 'textOnRight';
const cssClassesForSection: string = cssClassesSection[displayAs];
const cssClassesForCallToAction: string = cssClassesCallToAction[displayAs];
const cssClassesForText: string = cssTextClasses[displayAs];
---

<div class={`${widthClass || 'flex-1'} ${cssClassesForSection} ${cardTextAlignmentStyle} ${verticalAlignClass || 'self-center'}`}>
    {data.Heading && (
        <h2 class={`text-4xl font-bold text-base-content ${cardHeaderStyles}`} class:list={cssClassesForText}>
            {data.Heading}
        </h2>
    )}
    {data.SubHeading && (
        <p class="text-sm font-semibold text-base-content opacity-80" class:list={cssClassesForText}>
            {data.SubHeading}
        </p>
    )}
    {data.Body?.html && (
        <div class={`${cssClassesForText} text-base-content opacity-75`} set:html={data.Body.html}></div>
    )}
    {data.Links && data.Links.length > 0 && (
        <div class={cssClassesForCallToAction}>
            {
                data.Links.map((link, i) => {
                    const buttonType = ['', getButtonType(i)];
                    return (
                        <LinkButton cssClasses={[buttonType, cardButtonStyles]} link={link?.url?.default}>{link?.text}</LinkButton>
                    );
                })
            }
        </div>
    )}
</div>
