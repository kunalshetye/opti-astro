---
import type {
    CardFragment,
    DisplaySettingsFragment,
} from '../../../../__generated/sdk';
import type { ContentPayload } from '../../../graphql/shared/ContentPayload';
import LinkButton from '../ButtonComponent/LinkButton.astro';
// import { getCardStyles } from './CardStyling';
import { getButtonStyles } from '../ButtonComponent/ButtonStyling';

export interface Props {
    data: CardFragment;
    displaySettings: DisplaySettingsFragment[];
    displayTemplateKey: string;
    contentPayload: ContentPayload;
    DisplayAs?: string;
}
const { data, displaySettings, DisplayAs } = Astro.props as Props;
const cardButtonStyles = getButtonStyles(displaySettings, false); // false: button type defined here

const cssClassesSection = {
    textOnRight: 'flex-1 content-center',
    textOnLeft: 'flex-1 content-center',
    textAboveCard: 'flex-1 text-center',
    textBelowCard: 'flex-1 text-center',
};
const cssTextClasses = {
    textOnRight: 'mt-0',
    textOnLeft: 'mt-0',
    textAboveCard: 'mt-2',
    textBelowCard: 'mt-2',
};
const cssClassesCallToAction = {
    textOnRight: 'z-20 mt-8 flex gap-2 flex-wrap',
    textOnLeft: 'z-20 mt-8 flex gap-2 flex-wrap',
    textAboveCard: 'z-20 mt-8 flex justify-center gap-2 flex-wrap',
    textBelowCard: 'z-20 mt-8 flex justify-center gap-2 flex-wrap',
};
type DisplayAsType =
    | 'textOnRight'
    | 'textOnLeft'
    | 'textAboveCard'
    | 'textBelowCard';
const displayAs: DisplayAsType =
    (DisplayAs as DisplayAsType) ?? (data?.DisplayAs as DisplayAsType) ?? 'textOnRight';
const cssClassesForSection: string = cssClassesSection[displayAs];
const cssClassesForCallToAction: string = cssClassesCallToAction[displayAs];
const cssClassesForText: string = cssTextClasses[displayAs];
---

<div class={cssClassesForSection}>
    <p class="text-4xl font-bold text-base-content" class:list={cssClassesForText}>
        {data.Heading}
    </p>
    <p class="text-sm font-semibold text-base-content opacity-80" class:list={cssClassesForText}>
        {data.SubHeading}
    </p>
    <p class={`${cssClassesForText} text-base-content opacity-75`} set:html={data.Body?.html} />
    <div class={cssClassesForCallToAction}>
        {
            data.Links?.map((link, i) => {
                const buttonType: string[] = [""];
                switch (i) {
                    case 0:
                        buttonType.push('btn-primary');
                        break;
                    case 1:
                        buttonType.push('btn-secondary');
                        break;
                    case 2:
                        buttonType.push('btn-accent');
                        break;
                    case 3:
                        buttonType.push('btn-info');
                        break;
                    case 4:
                        buttonType.push('');
                        break;
                    default:
                        buttonType.push('btn-primary');
                        break;
                }
                return (
                    <LinkButton cssClasses={[buttonType, cardButtonStyles]} link={link?.url?.default}>{link?.text}</LinkButton>
                );
            })
        }
    </div>
</div>
