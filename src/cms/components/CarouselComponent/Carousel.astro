---
import { Image } from 'astro:assets';
import type {
    CarouselFragment,
    DisplaySettingsFragment,
} from '../../../../__generated/sdk';
import type { ContentPayload } from '../../../graphql/shared/ContentPayload';

export interface Props {
    data: CarouselFragment;
    displaySettings: DisplaySettingsFragment[];
    contentPayload: ContentPayload;
}
const { data, displaySettings, contentPayload } = Astro.props as Props;

// Configuration options
const showChevrons = true;
const showIndicators = true;
const showCaptions = false;
const carouselData = data?.Assets || [];
const itemCount = carouselData.length;

// Create a unique ID for this specific carousel instance
const carouselId = `splide-${Math.random().toString(36).substring(2, 9)}`;
---

<section
    id={carouselId}
    class="splide h-full w-full rounded-lg"
    aria-label="Carousel"
    data-show-arrows={showChevrons.toString()}
>
    <div class="splide__track h-full">
        <ul class="splide__list h-full">
            {/* Original slides */}
            {
                data?.Assets?.map((item, index) => (
                    <li class="splide__slide h-full">
                        <div class="relative block h-full w-full">
                            <Image
                                src={item?.url?.default || ''}
                                alt={item?.title || `Carousel image ${index + 1} of ${itemCount}`}
                                class="h-full w-full object-cover"
                                inferSize={true}
                            />
                            {showCaptions && (
                                <div class="bg-base-300/80 text-base-content absolute inset-x-0 bottom-0 p-2 md:p-4">
                                    <h3 class="text-base font-semibold md:text-lg">
                                        #todo
                                    </h3>
                                </div>
                            )}
                        </div>
                    </li>
                ))
            }
        </ul>
    </div>

    {/* Splide will automatically handle arrows based on configuration */}
</section>

<style is:inline>
    /* Custom arrow colors */
    .splide__arrow {
        background: color-mix(
            in srgb,
            var(--color-base-content) 50%,
            transparent
        ) !important;
        color: color-mix(
            in srgb,
            var(--color-base-content) 50%,
            transparent
        ) !important;
    }

    .splide__arrow--prev {
        background: color-mix(
            in srgb,
            var(--color-base-content) 80%,
            transparent
        ) !important;
    }

    .splide__arrow--next {
        background: color-mix(
            in srgb,
            var(--color-base-content) 80%,
            transparent
        ) !important;
    }

    /* Custom pagination colors */
    .splide__pagination__page {
        background: color-mix(
            in srgb,
            var(--color-base-content) 50%,
            transparent
        ) !important;
    }

    .splide__pagination__page.is-active {
        background: color-mix(
            in srgb,
            var(--color-base-content) 100%,
            transparent
        ) !important;
    }
</style>

<!-- Import Splide as a module script -->
<script>
    import '@splidejs/splide/css';
</script>

<!-- Add Splide JS via CDN as a fallback -->
<script
    src="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/js/splide.min.js"
></script>

<!-- Initialize this specific carousel instance -->
<script define:vars={{ carouselId, showChevrons }} is:inline>
    document.addEventListener('astro:page-load', function () {
        // Get only this specific carousel instance by ID
        const splideElement = document.getElementById(carouselId);

        // Initialize only if the element exists
        if (splideElement instanceof HTMLElement) {
            // Create a new Splide instance for this carousel
            const splide = new Splide(splideElement, {
                type: 'loop', // Enable loop
                perPage: 1, // Show 1 slide per page
                autoplay: true, // Enable autoplay
                interval: 5000, // Set autoplay interval to 5 seconds
                pauseOnHover: true, // Pause on hover
                pauseOnFocus: true, // Pause on focus
                pagination: true, // Show pagination
                arrows: showChevrons, // Show arrows if enabled in config
                speed: 500, // Transition speed
                rewind: true, // Allow rewinding
                easing: 'ease-in-out', // Transition easing
                height: '100%', // Full height
            }).mount();
        }
    });
</script>
