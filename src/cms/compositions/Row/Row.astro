---
import type { CompositionStructureNode } from '../../../../__generated/sdk';
import type { ContentPayload } from '../../../graphql/shared/ContentPayload';
import Column from '../Column/Column.astro';
import CarouselRow from './CarouselRow.astro';
import { getRowStyles } from './RowHelper';
import { getGlobalStyles } from '../../shared/globalStylesHelper';
import { getAnimationStyles } from '../../shared/animationStylesHelper';
export interface Props {
    row: any;
    contentPayload: ContentPayload;
}
const { row, contentPayload } = Astro.props as Props;
const rowNode = row as CompositionStructureNode;
const displayTemplateKey = rowNode.displayTemplateKey;
const rowStyles = getRowStyles(rowNode);
const globalStyles = getGlobalStyles(rowNode);
const styles = [...rowStyles, ...globalStyles]

const rowAnimationStyles = getAnimationStyles(rowNode);
const aosAnimationClass = rowAnimationStyles.aosAnimationClass;
---

<!--<h2>this is a row</h2>-->
{
    displayTemplateKey !== 'CarouselRow' && (
        <div
            class="vb:row flex flex-1 flex-col flex-wrap justify-start p-1 md:flex-row"
            class:list={styles}
            {...(aosAnimationClass ? { 'data-aos': aosAnimationClass } : {})}
        >
            {row.nodes?.map((column: any) => (
                <Column contentPayload={contentPayload} column={column} />
            ))}
        </div>
    )
}

{
    displayTemplateKey === 'CarouselRow' && (
        <div
            class="vb:row row-carousel flex flex-1 flex-col flex-wrap justify-start p-1 md:flex-row"
            class:list={styles}
        >
            <CarouselRow contentPayload={contentPayload} row={row} />
        </div>
    )
}
