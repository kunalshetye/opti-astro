---
import type { CompositionStructureNode } from '../../../../__generated/sdk';
import type { ContentPayload } from '../../../graphql/shared/ContentPayload';
import Column from '../Column/Column.astro';
import CarouselRow from './CarouselRow.astro';
import { getRowStyles } from './RowHelper';
import { getSimpleRowStyles } from './SimpleRowHelper';
import { getGlobalStyles } from '../../shared/globalStylesHelper';
export interface Props {
    row: any;
    contentPayload: ContentPayload;
}
const { row, contentPayload } = Astro.props as Props;
const rowNode = row as CompositionStructureNode;
const displayTemplateKey = rowNode.displayTemplateKey;

// Use appropriate helper based on template
let rowStyles;
if (displayTemplateKey === 'SimpleRow') {
    rowStyles = getSimpleRowStyles(rowNode);
} else {
    // AdvancedRow, DefaultRow (backward compat), or any other row template
    rowStyles = getRowStyles(rowNode);
}

const globalStyles = getGlobalStyles(rowNode);
const styles = [...rowStyles, ...globalStyles]
---

<!--<h2>this is a row</h2>-->
{
    displayTemplateKey !== 'CarouselRow' && (
        <div
            class="vb:row grid w-full justify-start p-1"
            class:list={styles}
        >
            {row.nodes?.map((column: any) => (
                <Column contentPayload={contentPayload} column={column} />
            ))}
        </div>
    )
}

{
    displayTemplateKey === 'CarouselRow' && (
        <div
            class="vb:row row-carousel grid w-full justify-start p-1"
            class:list={styles}
        >
            <CarouselRow contentPayload={contentPayload} row={row} />
        </div>
    )
}
