---
import type { ContentPayload } from '../../../graphql/shared/ContentPayload';
import Components from '../../components/_Components.astro';
import Row from '../Row/Row.astro';
import OptiForm from '../../forms/base/OptiFormsContainerDataComponent/OptiForm.astro';
import { getSectionStyles } from './SectionHelper';
import { getGlobalStyles } from '../../shared/globalStylesHelper';
import { getDictionaryFromDisplaySettings } from '../../../graphql/shared/displaySettingsHelpers.ts';
import { getContainerPaddingClasses } from '../../shared/styleHelpers';
export interface Props {
    grid: any;
    contentPayload: ContentPayload;
}
const { grid, contentPayload } = Astro.props as Props;
const isSection = grid.nodeType === 'section';
const isComponent = grid.nodeType === 'component';
const isFormContainer = grid.type === 'OptiFormsContainerData';

const sectionStyles = getSectionStyles(grid);
const globalStyles = getGlobalStyles(grid);
const styles = [...sectionStyles, ...globalStyles];

// Get container padding classes based on CMS settings
const displaySettings = grid.displaySettings;
const dictionary = getDictionaryFromDisplaySettings(displaySettings);
const paddingClasses = getContainerPaddingClasses(dictionary);
---

<div
    class:list={styles}
    class={`vb:grid relative grid w-full grid-cols-1 justify-start ${paddingClasses}`}
    data-epi-block-id={grid.key}
>
    {
        isSection && !isFormContainer &&
            grid.nodes?.map((row: any) => (
                <Row contentPayload={contentPayload} row={row} />
            ))
    }

    {
        isSection && isFormContainer &&
            <OptiForm contentPayload={contentPayload} grid={grid} />
    }

    {
        isComponent && (
            <div data-epi-block-id={grid.key}>
                <Components contentPayload={contentPayload} data={grid} />
            </div>
        )
    }
</div>
