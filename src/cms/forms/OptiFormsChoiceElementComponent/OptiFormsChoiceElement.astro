---
import type {
    DisplaySettingsFragment,
    OptiFormsChoiceElement,
} from '../../../../__generated/sdk';
import type { ContentPayload } from '../../../graphql/shared/ContentPayload';
import { requiredValidatorMsg } from '../formHelper';

// https://daisyui.com/components/input/

//// Example of Options JSON structure:
// "Options": [
//   {
//     "label": "Choice 1",
//     "value": "Choice 1",
//     "selected": false
//   },
//   {
//     "label": "Choice 2",
//     "value": "Choice 2",
//     "selected": false
//   }
// ],
// "AllowMultiSelect": true,

export interface Props {
    data: OptiFormsChoiceElement;
    contentPayload: ContentPayload;
    displaySettings: DisplaySettingsFragment[];
    Label?: string;
    Tooltip?: string;
    Options?: any;
    Validators?: any;
    AllowMultiSelect?: boolean;
}
const { data, displaySettings } = Astro.props as Props;
const { Label, Tooltip, Options, Validators, AllowMultiSelect } = data;

const isRequiredErrorMsg = requiredValidatorMsg(Validators);
const inputId = Label?.replace(/\s+/g, '_') || `choice-${Math.random().toString(36).substr(2, 4)}`;
const legendId = `${inputId}-legend`;
const instructionsId = `${inputId}-instructions`;

// Generate error IDs for ARIA
const errorIds = [
    isRequiredErrorMsg && `${inputId}-required-error`
].filter(Boolean).join(' ');

const describedByIds = [
    instructionsId,
    errorIds
].filter(Boolean).join(' ');

// Determine input type and role based on AllowMultiSelect
const inputType = AllowMultiSelect ? 'checkbox' : 'radio';
const groupRole = AllowMultiSelect ? 'group' : 'radiogroup';
const inputClass = AllowMultiSelect ? 'checkbox' : 'radio';
const instructionText = AllowMultiSelect 
    ? (isRequiredErrorMsg ? "Select at least one option" : "Select one or more options")
    : "Select one option. Use arrow keys to navigate.";
---

<fieldset class="fieldset bg-base-100 border-base-300 rounded-box w-full border p-4">
    <legend id={legendId} class="fieldset-legend text-lg font-semibold">
        {Label}
        {isRequiredErrorMsg && <span aria-label="required" class="text-red-500 ml-1">*</span>}
    </legend>
    
    <div id={instructionsId} class="text-sm text-gray-600 mb-2">
        {instructionText}
    </div>
    
    <div 
        class="flex flex-row flex-wrap gap-x-6 gap-y-2"
        role={groupRole}
        aria-labelledby={legendId}
        aria-describedby={describedByIds}
        {...(!AllowMultiSelect && { 'aria-required': isRequiredErrorMsg ? "true" : "false" })}
    >
        {(Array.isArray(Options) ? Options : []).map(
            (opt: { label: string; value: string; selected?: boolean }, idx: number) => {
                const optionId = `${inputId}-${inputType}-${idx}`;
                return (
                    <label class="label cursor-pointer justify-start gap-3" for={optionId}>
                        <input
                            id={optionId}
                            name={inputId}
                            type={inputType}
                            class={inputClass}
                            value={opt.value}
                            checked={opt.selected}
                            required={isRequiredErrorMsg ? (AllowMultiSelect ? false : true) : false}
                        />
                        <span class="label-text">{opt.label}</span>
                    </label>
                );
            }
        )}
    </div>
    
    {
        isRequiredErrorMsg && (
            <div id={`${inputId}-required-error`} class="validator-hint hidden">{isRequiredErrorMsg}</div>
        )
    }
</fieldset>
