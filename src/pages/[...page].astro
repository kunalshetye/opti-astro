---
import Components from "../components/cms/OnPageEditing/components/_Components.astro";
import Pages from "../components/cms/OnPageEditing/pages/_Pages.astro";
import Experiences from "../components/cms/VisualBuilder/experiences/_Experiences.astro";
import { Locales } from "../services/graphql/__generated/sdk";
import { getOptimizelySdk } from "../services/graphql/getSdk";
import { ContentPayload } from "../services/shared/ContentPayload";

import { getRelativeLocaleUrl } from "astro:i18n";
const lang = Astro.currentLocale;

const ctx = "view";

var contentPayload: ContentPayload = {
  ctx: ctx,
  key: null,
  ver: null,
  loc: null,
  preview_token: "",
  types: null,
};

const urlPath = `${Astro.url.pathname.replace(/\/$/, "")}/`;
const urlBase = Astro.url.origin;
const contentByPathResponse = await getOptimizelySdk(contentPayload).contentByPath({
  base: urlBase,
  url: urlPath,
});
if (contentByPathResponse._Content.items.length === 0) {
  // return Astro.redirect("/en");
  return Astro.redirect(getRelativeLocaleUrl(lang, '/'));
}
const item = contentByPathResponse._Content.items[0];
const contentByIdResponse = await getOptimizelySdk(contentPayload).contentById({
  key: item._metadata.key,
  ver: item._metadata.version,
  loc: item._metadata.locale as Locales,
});

contentPayload = {
  ctx: ctx,
  key: item._metadata.key,
  ver: item._metadata.version,
  loc: item._metadata.locale as Locales,
  preview_token: "",
  types: contentByIdResponse._Content.items[0]._metadata.types,
};
const isComponentType = contentPayload.types.includes("_Component");
const isExperienceType = contentPayload.types.includes("_Experience");
const isPageType =
  contentPayload.types.includes("_Page") && isExperienceType === false;
---

<>
  {isComponentType && <Components data={contentPayload} />}
  {isExperienceType && <Experiences data={contentPayload} />}
  {isPageType && <Pages data={contentPayload} />}
</>
