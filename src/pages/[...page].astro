---
import { Locales } from '../../__generated/sdk';
import Components from '../cms/components/_Components.astro';
import Experiences from '../cms/experiences/_Experiences.astro';
import Pages from '../cms/pages/_Pages.astro';
import { getOptimizelySdk } from '../graphql/getSdk';
import type { ContentPayload } from '../graphql/shared/ContentPayload';

import { getRelativeLocaleUrl } from 'astro:i18n';
const lang = Astro.currentLocale;

const ctx = 'view';

var contentPayload: ContentPayload = {
    ctx: ctx,
    key: '',
    ver: '',
    loc: '',
    preview_token: '',
    types: [],
};

const urlPath = `${Astro.url.pathname.replace(/\/$/, '')}/`;
const urlPathNoSlash = `${Astro.url.pathname.replace(/\/$/, '')}`;
const urlBase = Astro.url.origin;
const contentByPathResponse = await getOptimizelySdk(
    contentPayload
).contentByPath({
    base: urlBase,
    url: urlPath,
    urlNoSlash: urlPathNoSlash
});
if (!contentByPathResponse._Content 
    || !contentByPathResponse._Content.item 
    || !contentByPathResponse._Content.item._metadata?.key) {
    return Astro.redirect(getRelativeLocaleUrl(lang, '/404'), 404);
}
const item = contentByPathResponse._Content.item;
if (!item?._metadata) {
    throw new Error('Metadata is missing in the content item');
}

const contentByIdResponse = await getOptimizelySdk(contentPayload).contentById({
    key: item._metadata.key || '',
    ver: item._metadata.version || '',
    loc: item._metadata.locale as Locales,
});
contentPayload = {
    ctx: ctx,
    key: item._metadata.key || '',
    ver: item._metadata.version || '',
    loc: item._metadata.locale as Locales,
    preview_token: '',
    types:
        (contentByIdResponse?._Content?.item?._metadata?.types as string[]) ||
        [],
};
const isComponentType = contentPayload.types.includes('_Component');
const isExperienceType = contentPayload.types.includes('_Experience');
const isPageType =
    contentPayload.types.includes('_Page') && isExperienceType === false;
---

<>
    {
        isComponentType && (
            <Components data={contentPayload} contentPayload={contentPayload} />
        )
    }
    {isExperienceType && <Experiences data={contentPayload} />}
    {isPageType && <Pages data={contentPayload} />}
</>
