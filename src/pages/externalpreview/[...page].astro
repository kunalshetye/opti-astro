---
import qs from 'query-string';

import type { Locales } from 'astro';
import { getCurrentLocale, getRelativeLocaleUrl, localeToSdkLocale, resolveContentWithFallback } from '../../lib/locale-utils';
// Initialize locale configuration
import '../../lib/locale-init.js';
import Component from '../../cms/components/_Component.astro';
import Experiences from '../../cms/experiences/_Experiences.astro';
import { getOptimizelySdk } from '../../graphql/getSdk';
import { isDraftContent, isExternalPreviewEnabled, isValidExtPreviewToken } from '../../cms/shared/utils.ts';
import type { ContentPayload } from '../../graphql/shared/ContentPayload';
import Pages from '../../cms/pages/_Pages.astro';

import { EXTERNAL_PREVIEW_ENABLED } from 'astro:env/server';

const ctx = 'ext_preview';

var extPreviewPayload: ContentPayload = {
    ctx: ctx,
    key: '',
    ver: '',
    loc: '',
    preview_token: '',
    types: [],
};

var extPreviewPayload = qs.parse(Astro.url.search) as unknown as ContentPayload;
extPreviewPayload.loc = localeToSdkLocale(getCurrentLocale(Astro));
extPreviewPayload.ctx = ctx;

const isDraft = await isDraftContent(extPreviewPayload.ver);
const isExtPreviewEnabled = await isExternalPreviewEnabled(extPreviewPayload.ver);

const urlBase = Astro.url.origin;
const currentPagePath = `${Astro.url.pathname.replace(/\/$/, '')}/`
    .split('/')
    .filter((p) => p !== 'externalpreview')
    .join('/');
const currentPagePathNoSlash = `${currentPagePath.replace(/\/$/, '')}`;

if (!EXTERNAL_PREVIEW_ENABLED || !isDraft || !isExtPreviewEnabled) {
    return Astro.redirect(getRelativeLocaleUrl(getCurrentLocale(Astro), '/404'), 404);
}

// Use the helper function to resolve content with fallback
const fallbackResult = await resolveContentWithFallback(
    getOptimizelySdk,
    extPreviewPayload,
    urlBase,
    currentPagePath,
    getCurrentLocale(Astro),
    false // No debug logs for external preview
);

if (fallbackResult.shouldRedirect404) {
    return Astro.redirect(getRelativeLocaleUrl(getCurrentLocale(Astro), '/404'), 404);
}

const contentByPathResponse = fallbackResult.contentResponse;
const actualLocaleUsed = fallbackResult.actualLocaleUsed;
const item = contentByPathResponse._Content.item;

extPreviewPayload.key = item?._metadata?.key || '';

const token = Astro.url.searchParams.get('token') || '';
if (!token || !isValidExtPreviewToken(extPreviewPayload.key, extPreviewPayload.ver, token)) {
    return Astro.redirect(getRelativeLocaleUrl(getCurrentLocale(Astro), '/404'), 404);
}

// Update the payload to use the actual locale that has content
const contentByIdPayload = {
    ...extPreviewPayload,
    loc: localeToSdkLocale(actualLocaleUsed) as Locales,
};

// Search by content ID to get the content item
const optiPreviewResponse = await getOptimizelySdk(
    contentByIdPayload
).contentById({
    key: extPreviewPayload.key,
    loc: localeToSdkLocale(actualLocaleUsed) as Locales,
    ver: extPreviewPayload.ver,
});

const types = optiPreviewResponse?._Content?.item?._metadata?.types;
if (!types || types.length === 0 || types === null) {
    return Astro.redirect(getRelativeLocaleUrl(getCurrentLocale(Astro), '/404'), 404);
} else {
    const filteredTypes = types.filter((type): type is string => type !== null);
    extPreviewPayload.types = filteredTypes;
    // Update the payload to use the actual locale for rendering
    extPreviewPayload.loc = localeToSdkLocale(actualLocaleUsed) as Locales;
}

const isComponentType = extPreviewPayload.types?.includes('_Component');
const isExperienceType = extPreviewPayload.types?.includes('_Experience');
const isPageType = extPreviewPayload.types?.includes('_Page') && isExperienceType === false;
---

<>
    {!types && <h1 class="text-center text-5xl">Let's create some content</h1>}
    {isComponentType && <Component data={extPreviewPayload} />}
    {isExperienceType && <Experiences data={extPreviewPayload} />}
    {isPageType && <Pages data={extPreviewPayload} />}
</>
